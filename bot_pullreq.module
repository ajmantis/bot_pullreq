<?php
/**
 * @file
 * Enables choose to a random member for merge a pull request of one project.
 */

/**
 * Implements hook_help().
 */
function bot_pullreq_help($path, $arg) {
  // @TODO: Soon... Very soon...
}

/**
 * Implements hook_menu().
 */
function bot_pullreq_menu() {
  $items = array();
  $items['bot/pullreq'] = array(
    'title' => 'Pull req',
    'description' => 'You can administer Pull req. projects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bot_pullreq_results_form'),
    'file' => 'includes/bot_pullreq_results.inc',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Read conversations.
 * @see filter_irc_data
 */
function bot_pullreq_irc_msg_channel($data, $from_query = FALSE) {
  $botdata = filter_irc_data($data);

  if (count($botdata['message']) < 2) {
    return 0;
  }
  $pullreq = new PullReq();

  switch ($botdata['message'][0]) {
    case "addProject":
      $result = $pullreq->setProject($botdata);
      break;

    case "addMember":
      if (count($botdata['message']) < 3) {
        return 0;
      }
      $result = $pullreq->setMember($botdata);
      break;

    case "delMember":
      if (count($botdata['message']) < 3) {
        return 0;
      }
      $result = $pullreq->delMember($botdata);
      break;

    case "delProject":
      $result = $pullreq->delProject($botdata);
      break;

    case "getAllMembers":
      $result = $pullreq->getAllMembers($botdata);
      break;

    case "pullreq":
      $result = $pullreq->pullreq($botdata);
      break;

    default:
      return 0;
  }

  bot_message($botdata['to'], $result['msg']);
}

/**
 * Read query messages.
 * @see bot_pullreq_irc_msg_channel()
 */
function bot_pullreq_irc_msg_query($data) {
  bot_pullreq_irc_msg_channel($data, TRUE);
}

/**
 * Filter IRC data.
 */
function filter_irc_data($data) {
  return array(
    'message' => $data->messageex,
    'nick' => $data->nick,
    'to' => empty($data->channel) ? $data->nick : $data->channel,
  );
}
